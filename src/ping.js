const ping = require('ping');
const db = require('./db');
const { notifyAdmins } = require('./utils');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è IP
async function pingIP(ip) {
  try {
    const res = await ping.promise.probe(ip, {
      timeout: 5,  // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
      min_reply: 1,  // –ú—ñ–Ω—ñ–º—É–º 1 –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      extra: [
        '-n', '2',  // 2 —Å–ø—Ä–æ–±–∏
        '-w', '5000'  // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
      ]
    });
    
    const isAlive = res.alive;
    const responseTime = isAlive ? parseFloat(res.time) : null;
    const updateResult = await db.updateIPStatus(ip, isAlive ? 'up' : 'down', responseTime);
    
    if (isAlive) {
      // –Ø–∫—â–æ IP –∑–Ω–æ–≤—É –æ–Ω–ª–∞–π–Ω, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±—É–ª–∞ –ø–æ–º–∏–ª–∫–∞
      const hadError = await db.removeError(ip);
      if (hadError && updateResult.downtime) {
        const downtimeMinutes = Math.floor(updateResult.downtime / (1000 * 60));
        const message = `üü¢ IP ${ip} –∑–Ω–æ–≤—É –æ–Ω–ª–∞–π–Ω!\n` +
                       `‚è± –ß–∞—Å –ø—Ä–æ—Å—Ç–æ—é: ${downtimeMinutes} —Ö–≤–∏–ª–∏–Ω`;
        await notifyAdmins(message, global.bot);
      }
    } else {
      // –Ø–∫—â–æ IP –æ—Ñ–ª–∞–π–Ω, –¥–æ–¥–∞—î–º–æ –¥–æ –∂—É—Ä–Ω–∞–ª—É –ø–æ–º–∏–ª–æ–∫
      const added = await db.addError(ip);
      if (added) {
        const message = `üî¥ IP ${ip} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î!`;
        await notifyAdmins(message, global.bot);
      }
    }
    
    return {
      ip,
      status: isAlive ? 'up' : 'down',
      time: isAlive ? res.time : null
    };
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è ${ip}:`, error);
    return {
      ip,
      status: 'error',
      error: error.message
    };
  }
}

// –ü—ñ–Ω–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö IP
async function pingAllIPs() {
  try {
    const ips = await db.getAllIPs();
    const results = [];
    
    for (const ipData of ips) {
      try {
        const result = await pingIP(ipData.ip);
        results.push(result);
      } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—ñ ${ipData.ip}:`, error);
        results.push({
          ip: ipData.ip,
          status: 'error',
          error: error.message
        });
      }
    }
    
    return results;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É IP:', error);
    throw error;
  }
}

module.exports = {
  pingIP,
  pingAllIPs
};