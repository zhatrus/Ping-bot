const { exec } = require('child_process');
const db = require('./db');
const { notifyAdmins } = require('./utils');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è IP —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—É –∫–æ–º–∞–Ω–¥—É
async function pingIP(ip) {
  try {
    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î IP –≤ –±–∞–∑—ñ
    const ipData = await db.getIP(ip);
    if (!ipData) {
      throw new Error(`IP ${ip} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É`);
    }

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –û–°
    const isWindows = process.platform === 'win32';
    const command = isWindows ?
      `ping -n 2 -w 5000 ${ip}` :
      `ping -c 2 -W 5 ${ip}`;

    return new Promise((resolve, reject) => {
      exec(command, (error, stdout, stderr) => {
        if (error) {
          // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —è–∫ 'down'
          db.updateIPStatus(ip, 'down', null);
          resolve({ alive: false, time: null });
          return;
        }

        // –ü–∞—Ä—Å–∏–º–æ —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        let responseTime = null;
        const output = stdout.toString();

        if (isWindows) {
          // –î–ª—è Windows
          const match = output.match(/–°—Ä–µ–¥–Ω–µ–µ = (\d+)–º—Å|Average = (\d+)ms/);
          if (match) {
            responseTime = parseInt(match[1] || match[2]);
          }
        } else {
          // –î–ª—è Linux
          const match = output.match(/rtt min\/avg\/max\/mdev = [\d.]+\/([\d.]+)/);
          if (match) {
            responseTime = parseFloat(match[1]);
          }
        }

        const isAlive = responseTime !== null;
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        db.updateIPStatus(ip, isAlive ? 'up' : 'down', responseTime);
        
        resolve({
          alive: isAlive,
          time: responseTime
        });
      });
    });
    
    // –û–±—Ä–æ–±–ª—è—î–º–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É
    if (isAlive) {
      // –Ø–∫—â–æ IP –∑–Ω–æ–≤—É –æ–Ω–ª–∞–π–Ω, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±—É–ª–∞ –ø–æ–º–∏–ª–∫–∞
      const hadError = await db.removeError(ip);
      if (hadError && updateResult.downtime) {
        const downtimeMinutes = Math.floor(updateResult.downtime / (1000 * 60));
        const ipData = await db.getIP(ip);
        const ipName = ipData && ipData.name ? ` (${ipData.name})` : '';
        const message = `üü¢ IP ${ip}${ipName} –∑–Ω–æ–≤—É –æ–Ω–ª–∞–π–Ω!\n` +
                       `‚è± –ß–∞—Å –ø—Ä–æ—Å—Ç–æ—é: ${downtimeMinutes} —Ö–≤–∏–ª–∏–Ω`;
        await notifyAdmins(message, global.bot);
      }
    } else {
      // –Ø–∫—â–æ IP –æ—Ñ–ª–∞–π–Ω, –¥–æ–¥–∞—î–º–æ –¥–æ –∂—É—Ä–Ω–∞–ª—É –ø–æ–º–∏–ª–æ–∫
      const added = await db.addError(ip);
      if (added) {
        const ipData = await db.getIP(ip);
        const ipName = ipData && ipData.name ? ` (${ipData.name})` : '';
        const message = `üî¥ IP ${ip}${ipName} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î!`;
        await notifyAdmins(message, global.bot);
      }
    }
    
    return {
      ip,
      status: isAlive ? 'up' : 'down',
      time: responseTime
    };
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è ${ip}:`, error);
    return {
      ip,
      status: 'error',
      error: error.message
    };
  }
}

// –ü—ñ–Ω–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö IP
async function pingAllIPs() {
  try {
    const ips = await db.getAllIPs();
    const results = [];
    
    for (const ipData of ips) {
      try {
        const result = await pingIP(ipData.ip);
        results.push(result);
      } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—ñ ${ipData.ip}:`, error);
        results.push({
          ip: ipData.ip,
          status: 'error',
          error: error.message
        });
      }
    }
    
    return results;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É IP:', error);
    throw error;
  }
}

module.exports = {
  pingIP,
  pingAllIPs
};