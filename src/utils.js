const { Markup } = require('telegraf');
require('dotenv').config();

const allowedChatIds = (process.env.ADMIN_IDS || '').split(',').map(id => id.trim());

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –¥–æ—Å—Ç—É–ø
function isUserAllowed(chatId) {
  return allowedChatIds.includes(chatId.toString());
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω–∞–º
async function notifyAdmins(message, bot) {
  if (!bot) {
    console.error('–ë–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    return;
  }
  
  for (const chatId of allowedChatIds) {
    try {
      await bot.telegram.sendMessage(chatId, message);
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ ${chatId}:`, error);
    }
  }
}

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è IP-–∞–¥—Ä–µ—Å–∏
function isValidIP(ip) {
  const ipv4Regex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
  const ipv6Regex = /^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$/;
  return ipv4Regex.test(ip) || ipv6Regex.test(ip);
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ IP –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
function formatIPCard(ipData) {
  const name = ipData.name || '–ë–µ–∑ –Ω–∞–∑–≤–∏';
  const statusEmoji = ipData.status === 'up' ? 'üü¢' : ipData.status === 'down' ? 'üî¥' : '‚ö™';
  
  let uptimeInfo = '';
  if (ipData.date_stop) {
    const downtime = Math.floor((new Date() - new Date(ipData.date_stop)) / (1000 * 60));
    uptimeInfo = `\n‚è± –ß–∞—Å –ø—Ä–æ—Å—Ç–æ—é: ${downtime} —Ö–≤`;
  }
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è HTML —Å–∏–º–≤–æ–ª—ñ–≤
  function escapeHtml(text) {
    if (!text) return '';
    return String(text)
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
  };

  const text = `üìå ${escapeHtml(name)}
` +
         `üîó <code>${escapeHtml(ipData.ip)}</code>
` +
         `üìÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: ${escapeHtml(new Date(ipData.date_start).toLocaleString())}
` +
         `üîÑ –û—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: ${escapeHtml(new Date(ipData.date_last).toLocaleString())}
` +
         `üìä –°—Ç–∞–Ω: ${statusEmoji} ${ipData.status}
` +
         `‚è∞ –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${ipData.responseTime || '?'} ms
` +
         uptimeInfo;
  
  const markup = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîÑ –ü—ñ–Ω–≥–∞–Ω—É—Ç–∏', callback_data: `ping_${ipData.ip}` }],
        [{ text: '‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É', callback_data: `rename_${ipData.ip}` }]
      ]
    }
  };
  
  return { text, markup };
}

module.exports = {
  isUserAllowed,
  notifyAdmins,
  isValidIP,
  formatIPCard
};