const { isUserAllowed } = require('../utils');
const { showIPList } = require('./messages');
const db = require('../db');

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
async function handleStart(ctx) {
  if (!isUserAllowed(ctx.chat.id)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!');
  }
  
  await ctx.reply(
    'üëã –í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É IP-–∞–¥—Ä–µ—Å.\n\n' +
    '–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n' +
    '/ip - –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö IP\n' +
    '/add - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É IP\n' +
    '/help - –î–æ–≤—ñ–¥–∫–∞'
  );
  
  ctx.reply('–û—Å—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö IP:');
  await showIPList(ctx);
}

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /cancel
async function handleCancel(ctx) {
  const userId = ctx.from.id;
  if (global.userStates.has(userId)) {
    global.userStates.delete(userId);
    await ctx.reply('–ö–æ–º–∞–Ω–¥—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
  } else {
    await ctx.reply('–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.');
  }
}

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /ip
async function handleIp(ctx) {
  if (!isUserAllowed(ctx.chat.id)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!');
  }
  await showIPList(ctx);
}

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /add
async function handleAdd(ctx) {
  if (!isUserAllowed(ctx.chat.id)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!');
  }
  global.userStates.set(ctx.from.id, {
    command: 'add',
    step: 'waiting_ip'
  });
  await ctx.reply('–í–≤–µ–¥—ñ—Ç—å IP-–∞–¥—Ä–µ—Å—É –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:');
}

module.exports = {
  handleStart,
  handleCancel,
  handleIp,
  handleAdd
};
