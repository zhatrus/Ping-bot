const { isUserAllowed } = require('../utils');
const { showIPList } = require('./messages');
const db = require('../db');

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
async function handleStart(ctx) {
  if (!isUserAllowed(ctx.chat.id)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!');
  }
  
  await ctx.reply(
    'üëã –í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É IP-–∞–¥—Ä–µ—Å.\n\n' +
    '–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n' +
    '/ip - –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö IP\n' +
    '/add - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É IP\n' +
    '/del - –í–∏–¥–∞–ª–∏—Ç–∏ IP\n' +
    '/help - –î–æ–≤—ñ–¥–∫–∞'
  );
  
  ctx.reply('–û—Å—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö IP:');
  await showIPList(ctx);
}

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /cancel
async function handleCancel(ctx) {
  const userId = ctx.from.id;
  if (global.userStates.has(userId)) {
    global.userStates.delete(userId);
    await ctx.reply('–ö–æ–º–∞–Ω–¥—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
  } else {
    await ctx.reply('–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.');
  }
}

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /ip
async function handleIp(ctx) {
  try {
    if (!isUserAllowed(ctx.chat.id)) {
      return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!');
    }
    await showIPList(ctx);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É IP:', error);
    await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É IP. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
}

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /add
async function handleAdd(ctx) {
  if (!isUserAllowed(ctx.chat.id)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!');
  }
  global.userStates.set(ctx.from.id, {
    command: 'add',
    step: 'waiting_ip'
  });
  await ctx.reply('–í–≤–µ–¥—ñ—Ç—å IP-–∞–¥—Ä–µ—Å—É –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:');
}

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /del
async function handleDel(ctx) {
  if (!isUserAllowed(ctx.chat.id)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!');
  }

  const userId = ctx.from.id;
  const args = ctx.message.text.split(' ');
  
  // –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤, –ø–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫
  if (args.length < 2) {
    try {
      const ips = db.getAllIPs();
      
      if (ips.length === 0) {
        return ctx.reply('–°–ø–∏—Å–æ–∫ IP –ø–æ—Ä–æ–∂–Ω—ñ–π.');
      }
      
      await ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å IP –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:');
      
      // –î–ª—è –∫–æ–∂–Ω–æ–≥–æ IP —Å—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è
      for (const ipData of ips) {
        const ipName = ipData.name ? ` (${ipData.name})` : '';
        const ipStatus = ipData.status === 'up' ? 'üü¢' : 'üî¥';
        const ipText = `${ipStatus} ${ipData.ip}${ipName}`;
        
        await ctx.reply(ipText, {
          reply_markup: {
            inline_keyboard: [
              [{
                text: 'üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏',
                callback_data: `delete_${ipData.ip}`
              }]
            ]
          }
        });
      }
      
      // –î–æ–¥–∞—î–º–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è —Ç–∞ –∫–Ω–æ–ø–∫—É –°–∫–∞—Å—É–≤–∞—Ç–∏
      return ctx.reply('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–∏–¥–∞–ª–∏—Ç–∏" –¥–ª—è –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ IP', {
        reply_markup: {
          inline_keyboard: [
            [{
              text: 'üîô –°–∫–∞—Å—É–≤–∞—Ç–∏',
              callback_data: 'cancel_delete'
            }]
          ]
        }
      });
      
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É IP:', error);
      return ctx.reply('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É IP');
    }
  }

  // –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º, –≤–∏–¥–∞–ª—è—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π IP
  const ip = args[1];
  
  try {
    const result = db.removeIP(ip);
    if (result) {
      await ctx.reply(`‚úÖ IP ${ip} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ`);
    } else {
      await ctx.reply(`‚ùå –ü–æ–º–∏–ª–∫–∞: IP ${ip} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É`);
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ IP:', error);
    await ctx.reply('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ IP');
  }
}

module.exports = {
  handleStart,
  handleCancel,
  handleIp,
  handleAdd,
  handleDel
};
